@startuml
'https://plantuml.com/class-diagram

abstract class Compra {
    # {static} nroControl: int
    # fechaYHora: LocalDate
    # puntoDeVenta: PuntoDeVenta

    + {static} Compra(LocalDate fechaYHora, PuntoDeVenta punto): void
    - generarNroControl(): int
}

abstract class Estacionamiento {
    - patente: int
    - horaInicio: int
    - horaFin: int
    - esVigente: bool

    + estaVigente(): bool
    + getHoraInicio(): localTime
    + getHoraFin(): localTime
    + getPatente(): String
    + estaVigente(): bool
    + setEstaVigente(bool): void
    + setHoraFin(localTime): void
}

abstract class Modo {
    + {static} Modo: void
    + notificar(): void
    + {abstract} iniciarEstacionamiento(bool): void
    + {abstract} finalizarEstacionamientos(bool): void
}

class Apagado {
    + cambiar(): void
    + estaEncendido(): bool
}

class App {
    + {static} App(int, String, EstadoMovimiento, SEM): void
    + iniciarEstacionamiento(App): void
    + finalizarEstacionamiento(App): void
    + consultarSaldo(): int
    + setEstado(EstadoMovimiento): void
    + setEstadoGPS(bool): bool
    + setModo(Modo): void
    + getModo(): Modo
    + getNroCelular(): int
    + getPatente(): String
    + consultarSaldo(int nroCelular): int
    + walking(): void
    + driving(): void
}

class Automatico {
    + {static} Automatico: Automatico
    + {abstract} iniciarEstacionamiento(App): void
    + {abstract} finalizarEstacionamiento(App): void
}

class Celular {
    - numero: int
    - saldo: int

    + {static} Celular(int): Celular
    + getNumero(): int
    + getSaldo(): int
    + aumentarSaldo(int): void
    + descontarSaldo(int): void
}

class CompraPuntual {
    - cantidadHoras: int
    - patente: String

    + {static} CompraPuntual(LocalDate fechaYHora, PuntoDeVenta punto, int cantHoras, String patente): CompraPuntual
    + getCantHoras(): int
    + getPatente(): String
}

class Driving {
    + {static} Driving(App): Driving
    + driving(): void
    + walking(): void
    + isDriving(): boolean
}

class Encendido {
    + cambiar(): void
    + estaEncendido(): bool
}

class EstacionamientoApp {
    - celular: int

    + {static} EstacionamientoApp(int, localTime, int): EstacionamientoApp
    + horaMaximaFin(SEM, localTime): localTime
    + cantidadDeHs(localTime): int
    + saldoDisponible(int, int): int
    + getCelular(): int
    + estaVigente(): bool
}

class EstacionamientoPuntoVenta {
    + {static} EstacionamientoPuntoVenta(String, localTime, localTime, bool): EstacionamientoPuntoVenta
    + estaVigente(): bool
}

class Infraccion {
    - patente: String
    - fechaYHora: Date

    + {static} Infraccion(String, Date, ZonaDeEstacionamiento, Inspector): Infraccion
    + getPatente(): String
    + getFechaYHora(): Date
    + getZonaDeEstacionamiento(): ZonaDeEstacionamiento
    + getInspector(): Inspector
}

class Inspector {
    - {static} idInspector: int
    - nombreYApellido: String

    + {static} Inspector(String): Inspector
    + generarInfraccion(SEM sem, String patente): void
    + estacionamientoVigente(SEM sem, string): bool
    + getNombreYApellido(): String
    + {static} getIdInspector(): int
    - {static} generarIdInspector(): void
}

class Manual {
    + {static} Manual(): Manual
    + {abstract} iniciarEstacionamiento(App): void
    + {abstract} finalizarEstacionamiento(App): void
}

class PuntoVenta {
    + {static} PuntoVenta(String): PuntoVenta
    + recargarCelular(int): void
    + comprarEstacionamiento(int): Estacionamiento
    + horaFinDeCompra(int): localTime
}

class RecargaCelular {
    - monto: int
    - celular: int

    + {static} RecargaCelular(LocalDate, PuntoDeVenta, int, int): RecargaCelular
    + getMonto(): int
    + getCelular(): int
}

class SEM {
    - {static} precioPorHora: int
    - {static} inicioFranjaHoraria: LocalTime
    - {static} finFranjaHoraria: LocalTime
    - celulares: HashMap<Integer, Integer>

    + {static} SEM(List<ZonaDeEstacionamiento>): SEM
    - mostrarInformacionEstacionamiento(EstacionamientoApp): String
    - mostrarErrorEstacionamiento(): String
    - descontarSaldoDeEstacionamiento(LocalTime inicio, LocalTime fin, int nroCelular)
    - mostrarInformacionFinEstacionamiento(Estacionamiento): String
    - calcularCostoEstacionamiento(int duracion): int
    - calcularDuracionEstacionamiento(LocalTime inicio, LocalTime fin): int
    - estacionamientoPorApp(): Stream<EstacionamientoApp>
    + getPrecioPorHora(): int
    + getZonasDeEstacionamiento(): List<ZonaDeEstacionamiento>
    + getEstacionamientos(): List<Estacionamiento>
    + getInfracciones(): List<Infraccion>
    + getCompras(): List<Compra>
    + getCelulares(): HashMap<Integer, Integer>
    + finalizarTodosLosEstacionamientos()
    + generarEstacionamientoApp(App): String
    + agregarEstacionamientoPuntoVenta(EstacionamientoPuntoVenta)
    + finalizarEstacionamientoViaApp(int nroCelular): String
    + consultarEstacionamientoVigente(String patente): bool
    + altaInfraccion(Inspector, String patente)
    + nuevaCompraPuntual(CompraPuntual)
    + nuevaRecargaCelular(RecargaCelular)
    + suscribirse(Entidad entidad)
    + desuscribirse(Entidad entidad)
    + notificarInicioEstacionamiento(Estacionamiento estacionamiento)
    + notificarFinEstacionamiento(Estacionamiento estacionamiento)
}

class Walking {
    + {static} Walking(App): Walking
    + driving(): void
    + walking(): void
    + isDriving(): boolean
}

class ZonaEstacionamiento {
    - idZona: int

    + {static} ZonaDeEstacionamiento(int, Inspector, List<PuntoDeVenta>): ZonaDeEstacionamiento
    + getIdZona(): int
    + getInspector(): String
    + getPuntosDeVenta(): List<PuntoDeVenta>
}

interface Entidad {
    + inicioEstacionamiento(Estacionamiento estacionamiento)
    + finEstacionamiento(Estacionamiento estacionamiento)
}

interface EstadoGPS {
    + {abstract} cambiar(): void
    + {abstract} estaEncendido(): bool
}

interface EstadoMovimiento {
    + driving(): void
    + walking(): void
    + isDriving(): boolean
}

interface MovementSensor {
    + driving(): void
    + walking(): void
}

interface Publisher {
    + suscribirse(Entidad)
    + desuscribirse(Entidad)
    + notificarInicioEstacionamiento(Estacionamiento)
    + notificarFinEstacionamiento(Estacionamiento)
}

App ..|> MovementSensor
App --> EstadoGPS: estadoGPS
App --> EstadoMovimiento: estadoMovimiento
App --> SEM: sem
App <.. Apagado: app
App <.. Encendido: app
App <.. Driving: app
App <.. Walking: app
App --> Modo: modo
App <.. Modo: app
App --> Celular:celular
Compra <|-- CompraPuntual
Compra <|-- RecargaCelular
Infraccion --> Inspector: inspector
Infraccion --> ZonaEstacionamiento: zona
Inspector --> SEM
Estacionamiento <|-- EstacionamientoApp
Estacionamiento <|-- EstacionamientoPuntoVenta
EstadoGPS <|.. Apagado
EstadoGPS <|.. Encendido
Modo <|-- Automatico
Modo <|-- Manual
SEM --> Entidad: suscriptores "*"
PuntoVenta ..> Compra
PuntoVenta ..> EstacionamientoPuntoVenta
PuntoVenta --> SEM: sem
SEM --> "*" Compra: compras
SEM --> "*" Estacionamiento: estacionamientos
SEM --> "*" ZonaEstacionamiento: zonas
SEM ..|> Publisher
SEM --> "*" Celular: celulares
ZonaEstacionamiento --> "*" PuntoVenta: puntosVenta
ZonaEstacionamiento --> Inspector: inspector
EstadoMovimiento <|.. Driving
EstadoMovimiento <|.. Walking

@enduml